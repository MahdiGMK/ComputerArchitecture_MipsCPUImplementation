// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/25/2024 17:37:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    PipelineCPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PipelineCPU_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module PipelineCPU_vlg_check_tst (
	ALU_PC,
	ALUCONFLICTING,
	Last_PC,
	opcode_ALU,
	opcode_RegRead,
	PC,
	R0,
	R1,
	R2,
	R3,
	R4,
	R5,
	R6,
	R7,
	sampler_rx
);
input [7:0] ALU_PC;
input  ALUCONFLICTING;
input [7:0] Last_PC;
input [3:0] opcode_ALU;
input [3:0] opcode_RegRead;
input [7:0] PC;
input [7:0] R0;
input [7:0] R1;
input [7:0] R2;
input [7:0] R3;
input [7:0] R4;
input [7:0] R5;
input [7:0] R6;
input [7:0] R7;
input sampler_rx;

reg [7:0] ALU_PC_expected;
reg  ALUCONFLICTING_expected;
reg [7:0] Last_PC_expected;
reg [3:0] opcode_ALU_expected;
reg [3:0] opcode_RegRead_expected;
reg [7:0] PC_expected;
reg [7:0] R0_expected;
reg [7:0] R1_expected;
reg [7:0] R2_expected;
reg [7:0] R3_expected;
reg [7:0] R4_expected;
reg [7:0] R5_expected;
reg [7:0] R6_expected;
reg [7:0] R7_expected;

reg [7:0] ALU_PC_prev;
reg  ALUCONFLICTING_prev;
reg [7:0] Last_PC_prev;
reg [3:0] opcode_ALU_prev;
reg [3:0] opcode_RegRead_prev;
reg [7:0] PC_prev;
reg [7:0] R0_prev;
reg [7:0] R1_prev;
reg [7:0] R2_prev;
reg [7:0] R3_prev;
reg [7:0] R4_prev;
reg [7:0] R5_prev;
reg [7:0] R6_prev;
reg [7:0] R7_prev;

reg [7:0] ALU_PC_expected_prev;
reg  ALUCONFLICTING_expected_prev;
reg [7:0] Last_PC_expected_prev;
reg [3:0] opcode_ALU_expected_prev;
reg [3:0] opcode_RegRead_expected_prev;
reg [7:0] PC_expected_prev;
reg [7:0] R0_expected_prev;
reg [7:0] R1_expected_prev;
reg [7:0] R2_expected_prev;
reg [7:0] R3_expected_prev;
reg [7:0] R4_expected_prev;
reg [7:0] R5_expected_prev;
reg [7:0] R6_expected_prev;
reg [7:0] R7_expected_prev;

reg [7:0] last_ALU_PC_exp;
reg  last_ALUCONFLICTING_exp;
reg [7:0] last_Last_PC_exp;
reg [3:0] last_opcode_ALU_exp;
reg [3:0] last_opcode_RegRead_exp;
reg [7:0] last_PC_exp;
reg [7:0] last_R0_exp;
reg [7:0] last_R1_exp;
reg [7:0] last_R2_exp;
reg [7:0] last_R3_exp;
reg [7:0] last_R4_exp;
reg [7:0] last_R5_exp;
reg [7:0] last_R6_exp;
reg [7:0] last_R7_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:14] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 14'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_PC_prev = ALU_PC;
	ALUCONFLICTING_prev = ALUCONFLICTING;
	Last_PC_prev = Last_PC;
	opcode_ALU_prev = opcode_ALU;
	opcode_RegRead_prev = opcode_RegRead;
	PC_prev = PC;
	R0_prev = R0;
	R1_prev = R1;
	R2_prev = R2;
	R3_prev = R3;
	R4_prev = R4;
	R5_prev = R5;
	R6_prev = R6;
	R7_prev = R7;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_PC_expected_prev = ALU_PC_expected;
	ALUCONFLICTING_expected_prev = ALUCONFLICTING_expected;
	Last_PC_expected_prev = Last_PC_expected;
	opcode_ALU_expected_prev = opcode_ALU_expected;
	opcode_RegRead_expected_prev = opcode_RegRead_expected;
	PC_expected_prev = PC_expected;
	R0_expected_prev = R0_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
	R3_expected_prev = R3_expected;
	R4_expected_prev = R4_expected;
	R5_expected_prev = R5_expected;
	R6_expected_prev = R6_expected;
	R7_expected_prev = R7_expected;
end


// expected R0[ 7 ]
initial
begin
	R0_expected[7] = 1'bX;
end 
// expected R0[ 6 ]
initial
begin
	R0_expected[6] = 1'bX;
end 
// expected R0[ 5 ]
initial
begin
	R0_expected[5] = 1'bX;
end 
// expected R0[ 4 ]
initial
begin
	R0_expected[4] = 1'bX;
end 
// expected R0[ 3 ]
initial
begin
	R0_expected[3] = 1'bX;
end 
// expected R0[ 2 ]
initial
begin
	R0_expected[2] = 1'bX;
end 
// expected R0[ 1 ]
initial
begin
	R0_expected[1] = 1'bX;
end 
// expected R0[ 0 ]
initial
begin
	R0_expected[0] = 1'bX;
end 
// expected R1[ 7 ]
initial
begin
	R1_expected[7] = 1'bX;
end 
// expected R1[ 6 ]
initial
begin
	R1_expected[6] = 1'bX;
end 
// expected R1[ 5 ]
initial
begin
	R1_expected[5] = 1'bX;
end 
// expected R1[ 4 ]
initial
begin
	R1_expected[4] = 1'bX;
end 
// expected R1[ 3 ]
initial
begin
	R1_expected[3] = 1'bX;
end 
// expected R1[ 2 ]
initial
begin
	R1_expected[2] = 1'bX;
end 
// expected R1[ 1 ]
initial
begin
	R1_expected[1] = 1'bX;
end 
// expected R1[ 0 ]
initial
begin
	R1_expected[0] = 1'bX;
end 
// expected R2[ 7 ]
initial
begin
	R2_expected[7] = 1'bX;
end 
// expected R2[ 6 ]
initial
begin
	R2_expected[6] = 1'bX;
end 
// expected R2[ 5 ]
initial
begin
	R2_expected[5] = 1'bX;
end 
// expected R2[ 4 ]
initial
begin
	R2_expected[4] = 1'bX;
end 
// expected R2[ 3 ]
initial
begin
	R2_expected[3] = 1'bX;
end 
// expected R2[ 2 ]
initial
begin
	R2_expected[2] = 1'bX;
end 
// expected R2[ 1 ]
initial
begin
	R2_expected[1] = 1'bX;
end 
// expected R2[ 0 ]
initial
begin
	R2_expected[0] = 1'bX;
end 
// expected R3[ 7 ]
initial
begin
	R3_expected[7] = 1'bX;
end 
// expected R3[ 6 ]
initial
begin
	R3_expected[6] = 1'bX;
end 
// expected R3[ 5 ]
initial
begin
	R3_expected[5] = 1'bX;
end 
// expected R3[ 4 ]
initial
begin
	R3_expected[4] = 1'bX;
end 
// expected R3[ 3 ]
initial
begin
	R3_expected[3] = 1'bX;
end 
// expected R3[ 2 ]
initial
begin
	R3_expected[2] = 1'bX;
end 
// expected R3[ 1 ]
initial
begin
	R3_expected[1] = 1'bX;
end 
// expected R3[ 0 ]
initial
begin
	R3_expected[0] = 1'bX;
end 
// expected R4[ 7 ]
initial
begin
	R4_expected[7] = 1'bX;
end 
// expected R4[ 6 ]
initial
begin
	R4_expected[6] = 1'bX;
end 
// expected R4[ 5 ]
initial
begin
	R4_expected[5] = 1'bX;
end 
// expected R4[ 4 ]
initial
begin
	R4_expected[4] = 1'bX;
end 
// expected R4[ 3 ]
initial
begin
	R4_expected[3] = 1'bX;
end 
// expected R4[ 2 ]
initial
begin
	R4_expected[2] = 1'bX;
end 
// expected R4[ 1 ]
initial
begin
	R4_expected[1] = 1'bX;
end 
// expected R4[ 0 ]
initial
begin
	R4_expected[0] = 1'bX;
end 
// expected R5[ 7 ]
initial
begin
	R5_expected[7] = 1'bX;
end 
// expected R5[ 6 ]
initial
begin
	R5_expected[6] = 1'bX;
end 
// expected R5[ 5 ]
initial
begin
	R5_expected[5] = 1'bX;
end 
// expected R5[ 4 ]
initial
begin
	R5_expected[4] = 1'bX;
end 
// expected R5[ 3 ]
initial
begin
	R5_expected[3] = 1'bX;
end 
// expected R5[ 2 ]
initial
begin
	R5_expected[2] = 1'bX;
end 
// expected R5[ 1 ]
initial
begin
	R5_expected[1] = 1'bX;
end 
// expected R5[ 0 ]
initial
begin
	R5_expected[0] = 1'bX;
end 
// expected R6[ 7 ]
initial
begin
	R6_expected[7] = 1'bX;
end 
// expected R6[ 6 ]
initial
begin
	R6_expected[6] = 1'bX;
end 
// expected R6[ 5 ]
initial
begin
	R6_expected[5] = 1'bX;
end 
// expected R6[ 4 ]
initial
begin
	R6_expected[4] = 1'bX;
end 
// expected R6[ 3 ]
initial
begin
	R6_expected[3] = 1'bX;
end 
// expected R6[ 2 ]
initial
begin
	R6_expected[2] = 1'bX;
end 
// expected R6[ 1 ]
initial
begin
	R6_expected[1] = 1'bX;
end 
// expected R6[ 0 ]
initial
begin
	R6_expected[0] = 1'bX;
end 
// expected R7[ 7 ]
initial
begin
	R7_expected[7] = 1'bX;
end 
// expected R7[ 6 ]
initial
begin
	R7_expected[6] = 1'bX;
end 
// expected R7[ 5 ]
initial
begin
	R7_expected[5] = 1'bX;
end 
// expected R7[ 4 ]
initial
begin
	R7_expected[4] = 1'bX;
end 
// expected R7[ 3 ]
initial
begin
	R7_expected[3] = 1'bX;
end 
// expected R7[ 2 ]
initial
begin
	R7_expected[2] = 1'bX;
end 
// expected R7[ 1 ]
initial
begin
	R7_expected[1] = 1'bX;
end 
// expected R7[ 0 ]
initial
begin
	R7_expected[0] = 1'bX;
end 
// expected Last_PC[ 7 ]
initial
begin
	Last_PC_expected[7] = 1'bX;
end 
// expected Last_PC[ 6 ]
initial
begin
	Last_PC_expected[6] = 1'bX;
end 
// expected Last_PC[ 5 ]
initial
begin
	Last_PC_expected[5] = 1'bX;
end 
// expected Last_PC[ 4 ]
initial
begin
	Last_PC_expected[4] = 1'bX;
end 
// expected Last_PC[ 3 ]
initial
begin
	Last_PC_expected[3] = 1'bX;
end 
// expected Last_PC[ 2 ]
initial
begin
	Last_PC_expected[2] = 1'bX;
end 
// expected Last_PC[ 1 ]
initial
begin
	Last_PC_expected[1] = 1'bX;
end 
// expected Last_PC[ 0 ]
initial
begin
	Last_PC_expected[0] = 1'bX;
end 
// expected ALU_PC[ 7 ]
initial
begin
	ALU_PC_expected[7] = 1'bX;
end 
// expected ALU_PC[ 6 ]
initial
begin
	ALU_PC_expected[6] = 1'bX;
end 
// expected ALU_PC[ 5 ]
initial
begin
	ALU_PC_expected[5] = 1'bX;
end 
// expected ALU_PC[ 4 ]
initial
begin
	ALU_PC_expected[4] = 1'bX;
end 
// expected ALU_PC[ 3 ]
initial
begin
	ALU_PC_expected[3] = 1'bX;
end 
// expected ALU_PC[ 2 ]
initial
begin
	ALU_PC_expected[2] = 1'bX;
end 
// expected ALU_PC[ 1 ]
initial
begin
	ALU_PC_expected[1] = 1'bX;
end 
// expected ALU_PC[ 0 ]
initial
begin
	ALU_PC_expected[0] = 1'bX;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
end 
// expected opcode_ALU[ 3 ]
initial
begin
	opcode_ALU_expected[3] = 1'bX;
end 
// expected opcode_ALU[ 2 ]
initial
begin
	opcode_ALU_expected[2] = 1'bX;
end 
// expected opcode_ALU[ 1 ]
initial
begin
	opcode_ALU_expected[1] = 1'bX;
end 
// expected opcode_ALU[ 0 ]
initial
begin
	opcode_ALU_expected[0] = 1'bX;
end 
// expected opcode_RegRead[ 3 ]
initial
begin
	opcode_RegRead_expected[3] = 1'bX;
end 
// expected opcode_RegRead[ 2 ]
initial
begin
	opcode_RegRead_expected[2] = 1'bX;
end 
// expected opcode_RegRead[ 1 ]
initial
begin
	opcode_RegRead_expected[1] = 1'bX;
end 
// expected opcode_RegRead[ 0 ]
initial
begin
	opcode_RegRead_expected[0] = 1'bX;
end 

// expected ALUCONFLICTING
initial
begin
	ALUCONFLICTING_expected = 1'bX;
end 
// generate trigger
always @(ALU_PC_expected or ALU_PC or ALUCONFLICTING_expected or ALUCONFLICTING or Last_PC_expected or Last_PC or opcode_ALU_expected or opcode_ALU or opcode_RegRead_expected or opcode_RegRead or PC_expected or PC or R0_expected or R0 or R1_expected or R1 or R2_expected or R2 or R3_expected or R3 or R4_expected or R4 or R5_expected or R5 or R6_expected or R6 or R7_expected or R7)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_PC = %b | expected ALUCONFLICTING = %b | expected Last_PC = %b | expected opcode_ALU = %b | expected opcode_RegRead = %b | expected PC = %b | expected R0 = %b | expected R1 = %b | expected R2 = %b | expected R3 = %b | expected R4 = %b | expected R5 = %b | expected R6 = %b | expected R7 = %b | ",ALU_PC_expected_prev,ALUCONFLICTING_expected_prev,Last_PC_expected_prev,opcode_ALU_expected_prev,opcode_RegRead_expected_prev,PC_expected_prev,R0_expected_prev,R1_expected_prev,R2_expected_prev,R3_expected_prev,R4_expected_prev,R5_expected_prev,R6_expected_prev,R7_expected_prev);
	$display("| real ALU_PC = %b | real ALUCONFLICTING = %b | real Last_PC = %b | real opcode_ALU = %b | real opcode_RegRead = %b | real PC = %b | real R0 = %b | real R1 = %b | real R2 = %b | real R3 = %b | real R4 = %b | real R5 = %b | real R6 = %b | real R7 = %b | ",ALU_PC_prev,ALUCONFLICTING_prev,Last_PC_prev,opcode_ALU_prev,opcode_RegRead_prev,PC_prev,R0_prev,R1_prev,R2_prev,R3_prev,R4_prev,R5_prev,R6_prev,R7_prev);
`endif
	if (
		( ALU_PC_expected_prev[0] !== 1'bx ) && ( ALU_PC_prev[0] !== ALU_PC_expected_prev[0] )
		&& ((ALU_PC_expected_prev[0] !== last_ALU_PC_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_PC_expected_prev);
		$display ("     Real value = %b", ALU_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_PC_exp[0] = ALU_PC_expected_prev[0];
	end
	if (
		( ALU_PC_expected_prev[1] !== 1'bx ) && ( ALU_PC_prev[1] !== ALU_PC_expected_prev[1] )
		&& ((ALU_PC_expected_prev[1] !== last_ALU_PC_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_PC_expected_prev);
		$display ("     Real value = %b", ALU_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_PC_exp[1] = ALU_PC_expected_prev[1];
	end
	if (
		( ALU_PC_expected_prev[2] !== 1'bx ) && ( ALU_PC_prev[2] !== ALU_PC_expected_prev[2] )
		&& ((ALU_PC_expected_prev[2] !== last_ALU_PC_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_PC_expected_prev);
		$display ("     Real value = %b", ALU_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_PC_exp[2] = ALU_PC_expected_prev[2];
	end
	if (
		( ALU_PC_expected_prev[3] !== 1'bx ) && ( ALU_PC_prev[3] !== ALU_PC_expected_prev[3] )
		&& ((ALU_PC_expected_prev[3] !== last_ALU_PC_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_PC_expected_prev);
		$display ("     Real value = %b", ALU_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_PC_exp[3] = ALU_PC_expected_prev[3];
	end
	if (
		( ALU_PC_expected_prev[4] !== 1'bx ) && ( ALU_PC_prev[4] !== ALU_PC_expected_prev[4] )
		&& ((ALU_PC_expected_prev[4] !== last_ALU_PC_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_PC_expected_prev);
		$display ("     Real value = %b", ALU_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_PC_exp[4] = ALU_PC_expected_prev[4];
	end
	if (
		( ALU_PC_expected_prev[5] !== 1'bx ) && ( ALU_PC_prev[5] !== ALU_PC_expected_prev[5] )
		&& ((ALU_PC_expected_prev[5] !== last_ALU_PC_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_PC_expected_prev);
		$display ("     Real value = %b", ALU_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_PC_exp[5] = ALU_PC_expected_prev[5];
	end
	if (
		( ALU_PC_expected_prev[6] !== 1'bx ) && ( ALU_PC_prev[6] !== ALU_PC_expected_prev[6] )
		&& ((ALU_PC_expected_prev[6] !== last_ALU_PC_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_PC_expected_prev);
		$display ("     Real value = %b", ALU_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_PC_exp[6] = ALU_PC_expected_prev[6];
	end
	if (
		( ALU_PC_expected_prev[7] !== 1'bx ) && ( ALU_PC_prev[7] !== ALU_PC_expected_prev[7] )
		&& ((ALU_PC_expected_prev[7] !== last_ALU_PC_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_PC_expected_prev);
		$display ("     Real value = %b", ALU_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_PC_exp[7] = ALU_PC_expected_prev[7];
	end
	if (
		( ALUCONFLICTING_expected_prev !== 1'bx ) && ( ALUCONFLICTING_prev !== ALUCONFLICTING_expected_prev )
		&& ((ALUCONFLICTING_expected_prev !== last_ALUCONFLICTING_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUCONFLICTING :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUCONFLICTING_expected_prev);
		$display ("     Real value = %b", ALUCONFLICTING_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUCONFLICTING_exp = ALUCONFLICTING_expected_prev;
	end
	if (
		( Last_PC_expected_prev[0] !== 1'bx ) && ( Last_PC_prev[0] !== Last_PC_expected_prev[0] )
		&& ((Last_PC_expected_prev[0] !== last_Last_PC_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Last_PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Last_PC_expected_prev);
		$display ("     Real value = %b", Last_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Last_PC_exp[0] = Last_PC_expected_prev[0];
	end
	if (
		( Last_PC_expected_prev[1] !== 1'bx ) && ( Last_PC_prev[1] !== Last_PC_expected_prev[1] )
		&& ((Last_PC_expected_prev[1] !== last_Last_PC_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Last_PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Last_PC_expected_prev);
		$display ("     Real value = %b", Last_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Last_PC_exp[1] = Last_PC_expected_prev[1];
	end
	if (
		( Last_PC_expected_prev[2] !== 1'bx ) && ( Last_PC_prev[2] !== Last_PC_expected_prev[2] )
		&& ((Last_PC_expected_prev[2] !== last_Last_PC_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Last_PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Last_PC_expected_prev);
		$display ("     Real value = %b", Last_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Last_PC_exp[2] = Last_PC_expected_prev[2];
	end
	if (
		( Last_PC_expected_prev[3] !== 1'bx ) && ( Last_PC_prev[3] !== Last_PC_expected_prev[3] )
		&& ((Last_PC_expected_prev[3] !== last_Last_PC_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Last_PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Last_PC_expected_prev);
		$display ("     Real value = %b", Last_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Last_PC_exp[3] = Last_PC_expected_prev[3];
	end
	if (
		( Last_PC_expected_prev[4] !== 1'bx ) && ( Last_PC_prev[4] !== Last_PC_expected_prev[4] )
		&& ((Last_PC_expected_prev[4] !== last_Last_PC_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Last_PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Last_PC_expected_prev);
		$display ("     Real value = %b", Last_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Last_PC_exp[4] = Last_PC_expected_prev[4];
	end
	if (
		( Last_PC_expected_prev[5] !== 1'bx ) && ( Last_PC_prev[5] !== Last_PC_expected_prev[5] )
		&& ((Last_PC_expected_prev[5] !== last_Last_PC_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Last_PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Last_PC_expected_prev);
		$display ("     Real value = %b", Last_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Last_PC_exp[5] = Last_PC_expected_prev[5];
	end
	if (
		( Last_PC_expected_prev[6] !== 1'bx ) && ( Last_PC_prev[6] !== Last_PC_expected_prev[6] )
		&& ((Last_PC_expected_prev[6] !== last_Last_PC_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Last_PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Last_PC_expected_prev);
		$display ("     Real value = %b", Last_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Last_PC_exp[6] = Last_PC_expected_prev[6];
	end
	if (
		( Last_PC_expected_prev[7] !== 1'bx ) && ( Last_PC_prev[7] !== Last_PC_expected_prev[7] )
		&& ((Last_PC_expected_prev[7] !== last_Last_PC_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Last_PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Last_PC_expected_prev);
		$display ("     Real value = %b", Last_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Last_PC_exp[7] = Last_PC_expected_prev[7];
	end
	if (
		( opcode_ALU_expected_prev[0] !== 1'bx ) && ( opcode_ALU_prev[0] !== opcode_ALU_expected_prev[0] )
		&& ((opcode_ALU_expected_prev[0] !== last_opcode_ALU_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_ALU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_ALU_expected_prev);
		$display ("     Real value = %b", opcode_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_ALU_exp[0] = opcode_ALU_expected_prev[0];
	end
	if (
		( opcode_ALU_expected_prev[1] !== 1'bx ) && ( opcode_ALU_prev[1] !== opcode_ALU_expected_prev[1] )
		&& ((opcode_ALU_expected_prev[1] !== last_opcode_ALU_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_ALU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_ALU_expected_prev);
		$display ("     Real value = %b", opcode_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_ALU_exp[1] = opcode_ALU_expected_prev[1];
	end
	if (
		( opcode_ALU_expected_prev[2] !== 1'bx ) && ( opcode_ALU_prev[2] !== opcode_ALU_expected_prev[2] )
		&& ((opcode_ALU_expected_prev[2] !== last_opcode_ALU_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_ALU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_ALU_expected_prev);
		$display ("     Real value = %b", opcode_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_ALU_exp[2] = opcode_ALU_expected_prev[2];
	end
	if (
		( opcode_ALU_expected_prev[3] !== 1'bx ) && ( opcode_ALU_prev[3] !== opcode_ALU_expected_prev[3] )
		&& ((opcode_ALU_expected_prev[3] !== last_opcode_ALU_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_ALU[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_ALU_expected_prev);
		$display ("     Real value = %b", opcode_ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_opcode_ALU_exp[3] = opcode_ALU_expected_prev[3];
	end
	if (
		( opcode_RegRead_expected_prev[0] !== 1'bx ) && ( opcode_RegRead_prev[0] !== opcode_RegRead_expected_prev[0] )
		&& ((opcode_RegRead_expected_prev[0] !== last_opcode_RegRead_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_RegRead[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_RegRead_expected_prev);
		$display ("     Real value = %b", opcode_RegRead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_RegRead_exp[0] = opcode_RegRead_expected_prev[0];
	end
	if (
		( opcode_RegRead_expected_prev[1] !== 1'bx ) && ( opcode_RegRead_prev[1] !== opcode_RegRead_expected_prev[1] )
		&& ((opcode_RegRead_expected_prev[1] !== last_opcode_RegRead_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_RegRead[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_RegRead_expected_prev);
		$display ("     Real value = %b", opcode_RegRead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_RegRead_exp[1] = opcode_RegRead_expected_prev[1];
	end
	if (
		( opcode_RegRead_expected_prev[2] !== 1'bx ) && ( opcode_RegRead_prev[2] !== opcode_RegRead_expected_prev[2] )
		&& ((opcode_RegRead_expected_prev[2] !== last_opcode_RegRead_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_RegRead[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_RegRead_expected_prev);
		$display ("     Real value = %b", opcode_RegRead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_RegRead_exp[2] = opcode_RegRead_expected_prev[2];
	end
	if (
		( opcode_RegRead_expected_prev[3] !== 1'bx ) && ( opcode_RegRead_prev[3] !== opcode_RegRead_expected_prev[3] )
		&& ((opcode_RegRead_expected_prev[3] !== last_opcode_RegRead_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_RegRead[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_RegRead_expected_prev);
		$display ("     Real value = %b", opcode_RegRead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_RegRead_exp[3] = opcode_RegRead_expected_prev[3];
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( R0_expected_prev[0] !== 1'bx ) && ( R0_prev[0] !== R0_expected_prev[0] )
		&& ((R0_expected_prev[0] !== last_R0_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R0_exp[0] = R0_expected_prev[0];
	end
	if (
		( R0_expected_prev[1] !== 1'bx ) && ( R0_prev[1] !== R0_expected_prev[1] )
		&& ((R0_expected_prev[1] !== last_R0_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R0_exp[1] = R0_expected_prev[1];
	end
	if (
		( R0_expected_prev[2] !== 1'bx ) && ( R0_prev[2] !== R0_expected_prev[2] )
		&& ((R0_expected_prev[2] !== last_R0_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R0_exp[2] = R0_expected_prev[2];
	end
	if (
		( R0_expected_prev[3] !== 1'bx ) && ( R0_prev[3] !== R0_expected_prev[3] )
		&& ((R0_expected_prev[3] !== last_R0_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R0_exp[3] = R0_expected_prev[3];
	end
	if (
		( R0_expected_prev[4] !== 1'bx ) && ( R0_prev[4] !== R0_expected_prev[4] )
		&& ((R0_expected_prev[4] !== last_R0_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R0_exp[4] = R0_expected_prev[4];
	end
	if (
		( R0_expected_prev[5] !== 1'bx ) && ( R0_prev[5] !== R0_expected_prev[5] )
		&& ((R0_expected_prev[5] !== last_R0_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R0_exp[5] = R0_expected_prev[5];
	end
	if (
		( R0_expected_prev[6] !== 1'bx ) && ( R0_prev[6] !== R0_expected_prev[6] )
		&& ((R0_expected_prev[6] !== last_R0_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R0_exp[6] = R0_expected_prev[6];
	end
	if (
		( R0_expected_prev[7] !== 1'bx ) && ( R0_prev[7] !== R0_expected_prev[7] )
		&& ((R0_expected_prev[7] !== last_R0_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_expected_prev);
		$display ("     Real value = %b", R0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R0_exp[7] = R0_expected_prev[7];
	end
	if (
		( R1_expected_prev[0] !== 1'bx ) && ( R1_prev[0] !== R1_expected_prev[0] )
		&& ((R1_expected_prev[0] !== last_R1_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R1_exp[0] = R1_expected_prev[0];
	end
	if (
		( R1_expected_prev[1] !== 1'bx ) && ( R1_prev[1] !== R1_expected_prev[1] )
		&& ((R1_expected_prev[1] !== last_R1_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R1_exp[1] = R1_expected_prev[1];
	end
	if (
		( R1_expected_prev[2] !== 1'bx ) && ( R1_prev[2] !== R1_expected_prev[2] )
		&& ((R1_expected_prev[2] !== last_R1_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R1_exp[2] = R1_expected_prev[2];
	end
	if (
		( R1_expected_prev[3] !== 1'bx ) && ( R1_prev[3] !== R1_expected_prev[3] )
		&& ((R1_expected_prev[3] !== last_R1_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R1_exp[3] = R1_expected_prev[3];
	end
	if (
		( R1_expected_prev[4] !== 1'bx ) && ( R1_prev[4] !== R1_expected_prev[4] )
		&& ((R1_expected_prev[4] !== last_R1_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R1_exp[4] = R1_expected_prev[4];
	end
	if (
		( R1_expected_prev[5] !== 1'bx ) && ( R1_prev[5] !== R1_expected_prev[5] )
		&& ((R1_expected_prev[5] !== last_R1_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R1_exp[5] = R1_expected_prev[5];
	end
	if (
		( R1_expected_prev[6] !== 1'bx ) && ( R1_prev[6] !== R1_expected_prev[6] )
		&& ((R1_expected_prev[6] !== last_R1_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R1_exp[6] = R1_expected_prev[6];
	end
	if (
		( R1_expected_prev[7] !== 1'bx ) && ( R1_prev[7] !== R1_expected_prev[7] )
		&& ((R1_expected_prev[7] !== last_R1_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R1_exp[7] = R1_expected_prev[7];
	end
	if (
		( R2_expected_prev[0] !== 1'bx ) && ( R2_prev[0] !== R2_expected_prev[0] )
		&& ((R2_expected_prev[0] !== last_R2_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R2_exp[0] = R2_expected_prev[0];
	end
	if (
		( R2_expected_prev[1] !== 1'bx ) && ( R2_prev[1] !== R2_expected_prev[1] )
		&& ((R2_expected_prev[1] !== last_R2_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R2_exp[1] = R2_expected_prev[1];
	end
	if (
		( R2_expected_prev[2] !== 1'bx ) && ( R2_prev[2] !== R2_expected_prev[2] )
		&& ((R2_expected_prev[2] !== last_R2_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R2_exp[2] = R2_expected_prev[2];
	end
	if (
		( R2_expected_prev[3] !== 1'bx ) && ( R2_prev[3] !== R2_expected_prev[3] )
		&& ((R2_expected_prev[3] !== last_R2_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R2_exp[3] = R2_expected_prev[3];
	end
	if (
		( R2_expected_prev[4] !== 1'bx ) && ( R2_prev[4] !== R2_expected_prev[4] )
		&& ((R2_expected_prev[4] !== last_R2_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R2_exp[4] = R2_expected_prev[4];
	end
	if (
		( R2_expected_prev[5] !== 1'bx ) && ( R2_prev[5] !== R2_expected_prev[5] )
		&& ((R2_expected_prev[5] !== last_R2_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R2_exp[5] = R2_expected_prev[5];
	end
	if (
		( R2_expected_prev[6] !== 1'bx ) && ( R2_prev[6] !== R2_expected_prev[6] )
		&& ((R2_expected_prev[6] !== last_R2_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R2_exp[6] = R2_expected_prev[6];
	end
	if (
		( R2_expected_prev[7] !== 1'bx ) && ( R2_prev[7] !== R2_expected_prev[7] )
		&& ((R2_expected_prev[7] !== last_R2_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R2_exp[7] = R2_expected_prev[7];
	end
	if (
		( R3_expected_prev[0] !== 1'bx ) && ( R3_prev[0] !== R3_expected_prev[0] )
		&& ((R3_expected_prev[0] !== last_R3_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R3_exp[0] = R3_expected_prev[0];
	end
	if (
		( R3_expected_prev[1] !== 1'bx ) && ( R3_prev[1] !== R3_expected_prev[1] )
		&& ((R3_expected_prev[1] !== last_R3_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R3_exp[1] = R3_expected_prev[1];
	end
	if (
		( R3_expected_prev[2] !== 1'bx ) && ( R3_prev[2] !== R3_expected_prev[2] )
		&& ((R3_expected_prev[2] !== last_R3_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R3_exp[2] = R3_expected_prev[2];
	end
	if (
		( R3_expected_prev[3] !== 1'bx ) && ( R3_prev[3] !== R3_expected_prev[3] )
		&& ((R3_expected_prev[3] !== last_R3_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R3_exp[3] = R3_expected_prev[3];
	end
	if (
		( R3_expected_prev[4] !== 1'bx ) && ( R3_prev[4] !== R3_expected_prev[4] )
		&& ((R3_expected_prev[4] !== last_R3_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R3_exp[4] = R3_expected_prev[4];
	end
	if (
		( R3_expected_prev[5] !== 1'bx ) && ( R3_prev[5] !== R3_expected_prev[5] )
		&& ((R3_expected_prev[5] !== last_R3_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R3_exp[5] = R3_expected_prev[5];
	end
	if (
		( R3_expected_prev[6] !== 1'bx ) && ( R3_prev[6] !== R3_expected_prev[6] )
		&& ((R3_expected_prev[6] !== last_R3_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R3_exp[6] = R3_expected_prev[6];
	end
	if (
		( R3_expected_prev[7] !== 1'bx ) && ( R3_prev[7] !== R3_expected_prev[7] )
		&& ((R3_expected_prev[7] !== last_R3_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R3_exp[7] = R3_expected_prev[7];
	end
	if (
		( R4_expected_prev[0] !== 1'bx ) && ( R4_prev[0] !== R4_expected_prev[0] )
		&& ((R4_expected_prev[0] !== last_R4_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R4_exp[0] = R4_expected_prev[0];
	end
	if (
		( R4_expected_prev[1] !== 1'bx ) && ( R4_prev[1] !== R4_expected_prev[1] )
		&& ((R4_expected_prev[1] !== last_R4_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R4_exp[1] = R4_expected_prev[1];
	end
	if (
		( R4_expected_prev[2] !== 1'bx ) && ( R4_prev[2] !== R4_expected_prev[2] )
		&& ((R4_expected_prev[2] !== last_R4_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R4_exp[2] = R4_expected_prev[2];
	end
	if (
		( R4_expected_prev[3] !== 1'bx ) && ( R4_prev[3] !== R4_expected_prev[3] )
		&& ((R4_expected_prev[3] !== last_R4_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R4_exp[3] = R4_expected_prev[3];
	end
	if (
		( R4_expected_prev[4] !== 1'bx ) && ( R4_prev[4] !== R4_expected_prev[4] )
		&& ((R4_expected_prev[4] !== last_R4_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R4_exp[4] = R4_expected_prev[4];
	end
	if (
		( R4_expected_prev[5] !== 1'bx ) && ( R4_prev[5] !== R4_expected_prev[5] )
		&& ((R4_expected_prev[5] !== last_R4_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R4_exp[5] = R4_expected_prev[5];
	end
	if (
		( R4_expected_prev[6] !== 1'bx ) && ( R4_prev[6] !== R4_expected_prev[6] )
		&& ((R4_expected_prev[6] !== last_R4_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R4_exp[6] = R4_expected_prev[6];
	end
	if (
		( R4_expected_prev[7] !== 1'bx ) && ( R4_prev[7] !== R4_expected_prev[7] )
		&& ((R4_expected_prev[7] !== last_R4_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R4_exp[7] = R4_expected_prev[7];
	end
	if (
		( R5_expected_prev[0] !== 1'bx ) && ( R5_prev[0] !== R5_expected_prev[0] )
		&& ((R5_expected_prev[0] !== last_R5_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R5_exp[0] = R5_expected_prev[0];
	end
	if (
		( R5_expected_prev[1] !== 1'bx ) && ( R5_prev[1] !== R5_expected_prev[1] )
		&& ((R5_expected_prev[1] !== last_R5_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R5_exp[1] = R5_expected_prev[1];
	end
	if (
		( R5_expected_prev[2] !== 1'bx ) && ( R5_prev[2] !== R5_expected_prev[2] )
		&& ((R5_expected_prev[2] !== last_R5_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R5_exp[2] = R5_expected_prev[2];
	end
	if (
		( R5_expected_prev[3] !== 1'bx ) && ( R5_prev[3] !== R5_expected_prev[3] )
		&& ((R5_expected_prev[3] !== last_R5_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R5_exp[3] = R5_expected_prev[3];
	end
	if (
		( R5_expected_prev[4] !== 1'bx ) && ( R5_prev[4] !== R5_expected_prev[4] )
		&& ((R5_expected_prev[4] !== last_R5_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R5_exp[4] = R5_expected_prev[4];
	end
	if (
		( R5_expected_prev[5] !== 1'bx ) && ( R5_prev[5] !== R5_expected_prev[5] )
		&& ((R5_expected_prev[5] !== last_R5_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R5_exp[5] = R5_expected_prev[5];
	end
	if (
		( R5_expected_prev[6] !== 1'bx ) && ( R5_prev[6] !== R5_expected_prev[6] )
		&& ((R5_expected_prev[6] !== last_R5_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R5_exp[6] = R5_expected_prev[6];
	end
	if (
		( R5_expected_prev[7] !== 1'bx ) && ( R5_prev[7] !== R5_expected_prev[7] )
		&& ((R5_expected_prev[7] !== last_R5_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R5_exp[7] = R5_expected_prev[7];
	end
	if (
		( R6_expected_prev[0] !== 1'bx ) && ( R6_prev[0] !== R6_expected_prev[0] )
		&& ((R6_expected_prev[0] !== last_R6_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R6_exp[0] = R6_expected_prev[0];
	end
	if (
		( R6_expected_prev[1] !== 1'bx ) && ( R6_prev[1] !== R6_expected_prev[1] )
		&& ((R6_expected_prev[1] !== last_R6_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R6_exp[1] = R6_expected_prev[1];
	end
	if (
		( R6_expected_prev[2] !== 1'bx ) && ( R6_prev[2] !== R6_expected_prev[2] )
		&& ((R6_expected_prev[2] !== last_R6_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R6_exp[2] = R6_expected_prev[2];
	end
	if (
		( R6_expected_prev[3] !== 1'bx ) && ( R6_prev[3] !== R6_expected_prev[3] )
		&& ((R6_expected_prev[3] !== last_R6_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R6_exp[3] = R6_expected_prev[3];
	end
	if (
		( R6_expected_prev[4] !== 1'bx ) && ( R6_prev[4] !== R6_expected_prev[4] )
		&& ((R6_expected_prev[4] !== last_R6_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R6_exp[4] = R6_expected_prev[4];
	end
	if (
		( R6_expected_prev[5] !== 1'bx ) && ( R6_prev[5] !== R6_expected_prev[5] )
		&& ((R6_expected_prev[5] !== last_R6_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R6_exp[5] = R6_expected_prev[5];
	end
	if (
		( R6_expected_prev[6] !== 1'bx ) && ( R6_prev[6] !== R6_expected_prev[6] )
		&& ((R6_expected_prev[6] !== last_R6_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R6_exp[6] = R6_expected_prev[6];
	end
	if (
		( R6_expected_prev[7] !== 1'bx ) && ( R6_prev[7] !== R6_expected_prev[7] )
		&& ((R6_expected_prev[7] !== last_R6_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R6[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R6_expected_prev);
		$display ("     Real value = %b", R6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R6_exp[7] = R6_expected_prev[7];
	end
	if (
		( R7_expected_prev[0] !== 1'bx ) && ( R7_prev[0] !== R7_expected_prev[0] )
		&& ((R7_expected_prev[0] !== last_R7_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R7_exp[0] = R7_expected_prev[0];
	end
	if (
		( R7_expected_prev[1] !== 1'bx ) && ( R7_prev[1] !== R7_expected_prev[1] )
		&& ((R7_expected_prev[1] !== last_R7_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R7_exp[1] = R7_expected_prev[1];
	end
	if (
		( R7_expected_prev[2] !== 1'bx ) && ( R7_prev[2] !== R7_expected_prev[2] )
		&& ((R7_expected_prev[2] !== last_R7_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R7_exp[2] = R7_expected_prev[2];
	end
	if (
		( R7_expected_prev[3] !== 1'bx ) && ( R7_prev[3] !== R7_expected_prev[3] )
		&& ((R7_expected_prev[3] !== last_R7_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R7_exp[3] = R7_expected_prev[3];
	end
	if (
		( R7_expected_prev[4] !== 1'bx ) && ( R7_prev[4] !== R7_expected_prev[4] )
		&& ((R7_expected_prev[4] !== last_R7_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R7_exp[4] = R7_expected_prev[4];
	end
	if (
		( R7_expected_prev[5] !== 1'bx ) && ( R7_prev[5] !== R7_expected_prev[5] )
		&& ((R7_expected_prev[5] !== last_R7_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R7_exp[5] = R7_expected_prev[5];
	end
	if (
		( R7_expected_prev[6] !== 1'bx ) && ( R7_prev[6] !== R7_expected_prev[6] )
		&& ((R7_expected_prev[6] !== last_R7_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R7_exp[6] = R7_expected_prev[6];
	end
	if (
		( R7_expected_prev[7] !== 1'bx ) && ( R7_prev[7] !== R7_expected_prev[7] )
		&& ((R7_expected_prev[7] !== last_R7_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R7[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R7_expected_prev);
		$display ("     Real value = %b", R7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R7_exp[7] = R7_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module PipelineCPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [7:0] ALU_PC;
wire ALUCONFLICTING;
wire [7:0] Last_PC;
wire [3:0] opcode_ALU;
wire [3:0] opcode_RegRead;
wire [7:0] PC;
wire [7:0] R0;
wire [7:0] R1;
wire [7:0] R2;
wire [7:0] R3;
wire [7:0] R4;
wire [7:0] R5;
wire [7:0] R6;
wire [7:0] R7;

wire sampler;                             

// assign statements (if any)                          
PipelineCPU i1 (
// port map - connection between master ports and signals/registers   
	.ALU_PC(ALU_PC),
	.ALUCONFLICTING(ALUCONFLICTING),
	.clk(clk),
	.Last_PC(Last_PC),
	.opcode_ALU(opcode_ALU),
	.opcode_RegRead(opcode_RegRead),
	.PC(PC),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.R4(R4),
	.R5(R5),
	.R6(R6),
	.R7(R7)
);

// clk
initial
begin
	clk = 1'b1;
	# 10000;
	repeat(49)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
	clk = 1'b0;
end 

PipelineCPU_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

PipelineCPU_vlg_check_tst tb_out(
	.ALU_PC(ALU_PC),
	.ALUCONFLICTING(ALUCONFLICTING),
	.Last_PC(Last_PC),
	.opcode_ALU(opcode_ALU),
	.opcode_RegRead(opcode_RegRead),
	.PC(PC),
	.R0(R0),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.R4(R4),
	.R5(R5),
	.R6(R6),
	.R7(R7),
	.sampler_rx(sampler)
);
endmodule

